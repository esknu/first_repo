@article{babri2020,
  title = {Modeling {{Commuting Flows}} via {{Fixed Components}}},
  author = {Babri, Sahar and J{\"o}rnsten, Kurt and Thorsen, Inge and Ub{\o}e, Jan},
  year = {2020},
  month = may,
  journal = {Transportation Science},
  volume = {54},
  abstract = {The basic, reasonable hypothesis underlying this paper is that many individuals are comfortable with their current combination of job and residential location and have no intention of changing job location or moving from where they live. This causes autocorrelation in the time series of commuting flows and provides a rationale for introducing fixed components in the trip distribution model. The fixed components are assumed to be constant in time and separated from the observed trip distribution. We next consider the residuals and fit the model by a constrained entropy-maximization procedure. Based on commuting data from Stockholm County in Sweden, the fixed component spatial interaction model is demonstrated to lead to a substantial improvement in goodness of fit compared with conventional spatial interaction models. The identification of fixed components leads to significantly lower estimates of the distance deterrence parameter, and fixed components are further argued to be potentially useful in a prediction perspective. The distance deterrence parameter in the fixed component model reflects the spatial interaction of workers who are actually considering changes in their residential and/or job location. We also compare alternative measures of spatial separation and discuss differences in commuting behaviour by gender.}
}

@book{knuth1992,
  title = {Literate {{Programming}}},
  author = {Knuth, Donald E.},
  year = {1992},
  month = mar,
  publisher = {{Cambridge University Press}},
  abstract = {Literate programming is a programming methodology that combines a programming language with a documentation language, making programs more robust, more portable, and more easily maintained than programs written only in a high-level language. Computer programmers already know both kinds of languages; they need only learn a few conventions about alternating between languages to create programs that are works of literature. A literate programmer is an essayist who writes programs for humans to understand, instead of primarily writing instructions for machines to follow. When programs are written in the recommended style they can be transformed into documents by a document compiler and into efficient code by an algebraic compiler. This anthology of essays from the inventor of literate programming includes Knuth's early papers on related topics such as structured programming, as well as the Computer Journal article that launched literate programming itself.},
  googlebooks = {vovpQgAACAAJ},
  isbn = {978-0-937073-81-0},
  langid = {english},
  keywords = {Computers / Social Aspects}
}
